from typing import Union
from functools import cached_property
from typing_extensions import override

from nonebot.compat import PYDANTIC_V2, ConfigDict
{% for model in action.payload_types %}
from githubkit.versions.latest.models import {{ model }}
{% endfor %}

from ..message import Message

from ._base import Event

class {{ action.class_name }}(Event):
    {% if action.payload_types | length > 1 %}
    payload: Union[{{ action.payload_types | join(", ") }}]
    {% else %}
    payload: {{ action.payload_types | first }}
    {% endif %}

    {% if action.class_name in message_events %}
    @override
    def get_type(self) -> str:
        return "message"
    {% endif %}

    {% if action.class_name in has_message_events %}
    @cached_property
    def _message(self):
        return Message(self.payload.comment.body)

    @override
    def get_message(self):
        return self._message

    if PYDANTIC_V2:
        model_config = ConfigDict(ignored_types=(cached_property,))
    else:
        class Config:
            keep_untouched = (cached_property,)

    {% endif %}
